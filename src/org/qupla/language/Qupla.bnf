{

 parserClass="org.qupla.language.parser.QuplaParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Qupla"
  psiImplClassSuffix="Impl"
  psiPackage="org.qupla.language.psi"
  psiImplPackage="org.qupla.language.psi.impl"

  elementTypeHolderClass="org.qupla.language.psi.QuplaTypes"
  elementTypeClass="org.qupla.language.psi.QuplaElementType"
  tokenTypeClass="org.qupla.language.psi.QuplaTokenType"
  psiImplUtilClass="org.qupla.language.psi.QuplaPsiImplUtil"

  tokens=[
    ZERO='regexp:(0)'
    ONE='regexp:(1)'
    MINUS='regexp:(-)'
    PLUS='regexp:(\+)'
    SLASH='regexp:(/)'
    TIMES='regexp:(\*)'
    MODULO='regexp:(%)'
    AMP='regexp:(&)'
    DOT='regexp:(\.)'
    COMMENT='regexp://.*'
    WHITE_SPACE='regexp:\s+'

   CRLF='regexp:[\r\n]+'
   MERGE_OPERATOR='regexp:(\\)'
     SLASH='regexp:(/)'
     COMMA='regexp:(,)'
    IMPORT_KEYWORD='import'
    TYPE_KEYWORD='type'
    LUT_KEYWORD='lut'
    FUNC_KEYWORD='func'
    TEMPLATE_KEYWORD='template'
    USE_KEYWORD='use'
    STATE_KEYWORD='state'
    RETURN_KEYWORD='return'
    IDENTIFIER='regexp:([A-Za-z_])([A-Za-z0-9_])*'
    OPEN_BRACKET='regexp:(\[)'
    CLOSE_BRACKET='regexp:(\])'
    OPEN_BRACE='regexp:(\{)'
    CLOSE_BRACE='regexp:(\})'
    OPEN_PAR='regexp:(\()'
    CLOSE_PAR='regexp:(\))'
    OPEN_TAG='regexp:(<)'
    CLOSE_TAG='regexp:(>)'
    DIGIT='regexp:[2-9]'
    RANGE_OPERATOR='regexp:(\.\.)'
    SMART_RANGE_OPERATOR='regexp:(:)'
    ASSIGN = 'regexp:[=]'
  ]
}

qupla               ::= (stmt|COMMENT|CRLF)*
private stmt        ::= (importStmt | typeStmt | lutStmt | funcStmt | templateStmt | useStmt | testStmt | evalStmt)

importStmt          ::= IMPORT_KEYWORD moduleName
                    {
                        methods=[getSourceRoot getFilePath getReferencedFiles]
                        pin=1
                    }

typeStmt            ::= TYPE_KEYWORD typeName ( typeSize | ('{' fieldSpec+ '}') | typeAlias)
                    {
                        mixin="org.qupla.language.psi.impl.QuplaDefinitionImpl"
                        implements="org.qupla.language.psi.QuplaDefinition"

                        methods=[getPresentation getName setName getNameIdentifier getResolvedSize ]
                        pin=1
                    }

fieldSpec           ::= fieldName typeSize
                    {
                        mixin="org.qupla.language.psi.impl.QuplaDefinitionImpl"
                        implements="org.qupla.language.psi.QuplaDefinition"
                        methods=[getPresentation getResolvedSize]
                    }

lutStmt             ::= LUT_KEYWORD lutName ('{' lutEntry+ '}' | lutAlias)
                    {
                        mixin="org.qupla.language.psi.impl.QuplaDefinitionImpl"
                        implements="org.qupla.language.psi.QuplaDefinition"
                        methods=[getPresentation getName setName getNameIdentifier]
                        pin=1
                    }

funcStmt            ::= FUNC_KEYWORD funcSignature funcBody
                    {
                        mixin="org.qupla.language.psi.impl.QuplaDefinitionImpl"
                        implements="org.qupla.language.psi.QuplaDefinition"
                        methods=[getPresentation getName setName getNameIdentifier isInTemplate getAllTypeInstantiation]
                        pin=1
                    }

templateStmt        ::= TEMPLATE_KEYWORD templateName '<' (placeHolderTypeName (COMMA placeHolderTypeName)*) '>' (templateTypeRelation)? ('{' typeStmt* funcStmt+ '}')
                    {
                        mixin="org.qupla.language.psi.impl.QuplaDefinitionImpl"
                        implements="org.qupla.language.psi.QuplaDefinition"
                        methods=[getPresentation getName setName getNameIdentifier getAllTypeInstantiation]
                        pin=1
                    }
templateTypeRelation::= '=' typeOrPlaceHolderNameRef ('+' typeOrPlaceHolderNameRef)+

useStmt             ::= USE_KEYWORD templateNameRef typeInstantiation (COMMA typeInstantiation)*
                    {
                        mixin="org.qupla.language.psi.impl.QuplaDefinitionImpl"
                        implements="org.qupla.language.psi.QuplaDefinition"
                        methods=[getPresentation getName setName getNameIdentifier]
                        pin=1
                    }

evalStmt            ::= EVAL_KEYWORD funcExpr
                    {
                        pin=1
                    }
private evalRecover ::= !(stmt)

testStmt            ::= TEST_KEYWORD valueExpr '=' funcExpr
                    {
                        pin=1
                    }
private testRecover ::= !(stmt)

typeInstantiation   ::= '<' (typeNameRef (COMMA typeNameRef)*) '>'
                    {
                        mixin="org.qupla.language.psi.impl.QuplaDefinitionImpl"
                        implements="org.qupla.language.psi.QuplaDefinition"
                        methods=[getPresentation]
                    }

lutAlias            ::= ASSIGN lutNameRef AT moduleNameRef
typeAlias           ::= ASSIGN typeNameRef AT moduleNameRef

lutEntry            ::= tritList ASSIGN tritList
                    {
                        methods = [getInputLength getOutputLength]
                        pin=2 recoverWhile=lutEntryRecover
                    }
private lutEntryRecover ::= !(lutEntry | '}')

funcSignature       ::= typeOrPlaceHolderNameRef funcName ('<' typeOrPlaceHolderNameRef (COMMA typeOrPlaceHolderNameRef)* '>')? '(' (funcParameter(COMMA funcParameter)*) ')'
                    {
                        methods = [getTypeLabelWithBrackets]
                    }
funcParameter       ::= typeOrPlaceHolderNameRef paramName
                    {
                        pin=0 recoverWhile=funcParameterRecover
                    }
private funcParameterRecover ::=!(COMMA | CLOSE_PAR)

funcBody            ::= '{' joinExpr* affectExpr * stateExpr* assignExpr* returnExpr '}'
                    {
                        methods=[getFuncSignature]
                    }

joinExpr            ::= JOIN_KEYWORD environmentName (LIMIT_KEYWORD envValue)?
                    {
                        pin=1 recoverWhile=joinExprRecover
                    }
private joinExprRecover ::= !(joinExpr | affectExpr  | stateExpr | assignExpr | returnExpr)

affectExpr          ::= AFFECT_KEYWORD environmentName (DELAY_KEYWORD envValue)?
                    {
                        pin=1 recoverWhile=environmentRecover
                    }
private environmentRecover ::= !(affectExpr  | stateExpr | assignExpr | returnExpr)

envValue            ::= number

stateExpr           ::= STATE_KEYWORD typeOrPlaceHolderNameRef varName
                    {
                        pin=1 recoverWhile=stateExprRecover
                    }
private stateExprRecover ::= !(stateExpr | assignExpr | returnExpr)

assignExpr          ::= varName ASSIGN condExpr
                    {
                        pin=2 recoverWhile=assignExprRecover
                    }
private assignExprRecover ::= !(assignExpr | returnExpr)

returnExpr          ::= RETURN_KEYWORD condExpr
                    {
                        pin=1 recoverWhile=returnExprRecover
                    }
private returnExprRecover ::= (typeExpr | !('}'))

condExpr            ::= mergeExpr (QUESTION_MARK trueBranch ':' falseBranch)*

private trueBranch  ::= mergeExpr

private falseBranch ::= NULL_KEYWORD | condExpr

mergeExpr           ::= concatExpr (MERGE_OPERATOR concatExpr)*

concatExpr          ::= postfixExpr (AMP postfixExpr)*

postfixExpr         ::= valueExpr | funcExpr | lutExpr | lutOrSliceExpr | typeExpr | sliceExpr | sizeofExpr | ('(' condExpr ')')

valueExpr           ::= float | integer | trit

typeExpr            ::= typeOrPlaceHolderNameRef '{' fieldAssignExpr+ '}'
                    {
                        methods=[getResolvedSize ]
                    }

private fieldAssignExpr ::= fieldNameRef ASSIGN condExpr
                   {
                        pin=2 recoverWhile=returnFieldAssignExpr
                   }
private returnFieldAssignExpr ::= !(fieldAssignExpr | '}')

funcExpr            ::= funcNameRef ('<' typeOrPlaceHolderNameRef (COMMA typeOrPlaceHolderNameRef)* '>')? '(' (condExpr (COMMA condExpr)*) ')'
                    {
                        methods=[isInFuncStatement isInTemplateStatement getStatment getFuncStmt isInTemplate]
                    }

lutExpr             ::= lutNameRef '[' (mergeExpr (COMMA mergeExpr)+) ']'
                    {
                        methods=[getResolvedSize ]
                    }

sizeofExpr          ::= SIZEOF_KEYWORD typeOrPlaceHolderNameRef

sliceExpr           ::= paramOrVarNameRef (DOT fieldNameRef)* rangeExpr?
                    {
                        methods=[ hasRangeOperator hasOpenRange hasClosedRange hasSmartRange]
                    }

lutOrSliceExpr      ::= lutOrParamOrVarNameRef '[' ( mergeExpr | constExpr ) ']'
                    {
                        methods=[getResolvedSize ]
                    }

rangeExpr           ::= '[' constExpr ((RANGE_OPERATOR constExpr?) | (SMART_RANGE_OPERATOR constExpr))? ']'
                    {
                        methods=[ hasRangeOperator hasOpenRange hasClosedRange hasSmartRange]
                    }

constExpr           ::= constTerm ((PLUS|MINUS) constTerm)*
                    {
                        methods=[getResolvedSize isTypeOrPlaceHolderNameRef getTypeOrPlaceHolderNameRef]
                    }

constTerm           ::= constFactor ((SLASH|TIMES|MODULO) constFactor)*
                    {
                        methods=[getResolvedSize ]
                    }

constFactor         ::= funcExpr | number | typeOrPlaceHolderNameRef ('.' fieldNameRef)* | (MINUS constFactor) | ('(' constExpr ')')
                    {
                        methods = [getResolvedSize ]
                    }

typeSize            ::= '[' constExpr ']'
                    {
                        methods=[getResolvedSize]
                    }

tritList            ::= trit (COMMA trit)*
                    {
                        methods = [getLength]
                    }



varName             ::= IDENTIFIER
                    {
                        mixin="org.qupla.language.psi.impl.QuplaNamedElementImpl"
                        implements="org.qupla.language.psi.QuplaNamedElement"
                        methods=[getName setName getNameIdentifier getReference getPresentation]
                    }

paramName           ::= IDENTIFIER
                    {
                        mixin="org.qupla.language.psi.impl.QuplaNamedElementImpl"
                        implements="org.qupla.language.psi.QuplaNamedElement"
                        methods=[getName setName getNameIdentifier getResolvedSize getPresentation]
                    }

paramOrVarNameRef   ::= IDENTIFIER
                    {
                        implements="org.qupla.language.psi.QuplaResolvable"
                        methods = [getReference]
                    }

lutOrParamOrVarNameRef ::= IDENTIFIER
                    {
                        implements="org.qupla.language.psi.QuplaResolvable"
                        methods = [getReference ]
                    }

fieldName           ::= IDENTIFIER
                    {
                        mixin="org.qupla.language.psi.impl.QuplaNamedElementImpl"
                        implements="org.qupla.language.psi.QuplaNamedElement"
                        methods=[getName setName getNameIdentifier]
                    }

fieldNameRef        ::= IDENTIFIER
                    {
                        implements="org.qupla.language.psi.QuplaResolvable"
                        methods=[getResolvedSize getReference]
                    }

typeName            ::= IDENTIFIER
                    {
                        mixin="org.qupla.language.psi.impl.QuplaNamedElementImpl"
                        implements="org.qupla.language.psi.QuplaNamedElement"
                        methods=[getName setName getNameIdentifier getResolvedSize getPresentation]
                        pin=1 recoverWhile=typeNameRecover
                    }
private typeNameRecover ::= !('['|'{'|'=')

typeNameRef         ::= IDENTIFIER
                    {
                        implements="org.qupla.language.psi.QuplaResolvable"
                        methods = [getReference ]
                    }

funcName            ::= IDENTIFIER
                    {
                        mixin="org.qupla.language.psi.impl.QuplaNamedElementImpl"
                        implements="org.qupla.language.psi.QuplaNamedElement"
                        methods=[getName setName getNameIdentifier getPresentation]
                    }

funcNameRef         ::= IDENTIFIER
                    {
                        implements="org.qupla.language.psi.QuplaResolvable"
                        methods = [getReference ]
                    }

lutName             ::= IDENTIFIER
                    {
                        mixin="org.qupla.language.psi.impl.QuplaNamedElementImpl"
                        implements="org.qupla.language.psi.QuplaNamedElement"
                        methods = [getName setName getNameIdentifier getPresentation]
                        pin=1 recoverWhile=lutNameRecover
                    }
private lutNameRecover ::= !('{'|'=')

lutNameRef          ::= IDENTIFIER
                    {
                        implements="org.qupla.language.psi.QuplaResolvable"
                        methods = [getReference ]
                    }

templateName        ::= IDENTIFIER
                    {
                        mixin="org.qupla.language.psi.impl.QuplaNamedElementImpl"
                        implements="org.qupla.language.psi.QuplaNamedElement"
                        methods=[getName setName getNameIdentifier]
                    }

templateNameRef     ::= IDENTIFIER
                    {
                        implements="org.qupla.language.psi.QuplaResolvable"
                        methods = [getReference ]
                    }

placeHolderTypeName ::= IDENTIFIER
                    {
                        mixin="org.qupla.language.psi.impl.QuplaNamedElementImpl"
                        implements="org.qupla.language.psi.QuplaNamedElement"
                        methods=[getName setName getNameIdentifier]
                    }

typeOrPlaceHolderNameRef ::= IDENTIFIER
                    {
                        implements="org.qupla.language.psi.QuplaResolvable"
                        methods = [getReference getResolvedSize]
                    }

moduleName          ::= IDENTIFIER
moduleNameRef       ::= IDENTIFIER

environmentName     ::= IDENTIFIER

private trit        ::= MINUS|TRIT

number              ::= DIGITS
                    {
                        methods = [getResolvedSize ]
                    }

integer             ::= MINUS? number
                    {
                        methods = [getResolvedSize ]
                    }

float               ::= integer DOT number
