{

 parserClass="org.abra.language.parser.AbraParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Abra"
  psiImplClassSuffix="Impl"
  psiPackage="org.abra.language.psi"
  psiImplPackage="org.abra.language.psi.impl"

  elementTypeHolderClass="org.abra.language.psi.AbraTypes"
  elementTypeClass="org.abra.language.psi.AbraElementType"
  tokenTypeClass="org.abra.language.psi.AbraTokenType"
  psiImplUtilClass="org.abra.language.psi.AbraPsiImplUtil"

  tokens=[
    ZERO='regexp:(0)'
    ONE='regexp:(1)'
    MINUS='regexp:(-)'
    PLUS='regexp:(\+)'
    SLASH='regexp:(/)'
    TIMES='regexp:(\*)'
    MODULO='regexp:(%)'
    AMP='regexp:(&)'
    DOT='regexp:(\.)'
    COMMENT='regexp://.*'
    WHITE_SPACE='regexp:\s+'

   CRLF='regexp:[\r\n]+'
   MERGE_OPERATOR='regexp:(\\)'
     SLASH='regexp:(/)'
     COMMA='regexp:(,)'
    IMPORT_KEYWORD='regexp:(import)'
    TYPE_KEYWORD='regexp:(type)'
    LUT_KEYWORD='regexp:(lut)'
    FUNC_KEYWORD='regexp:(func)'
    TEMPLATE_KEYWORD='regexp:(template)'
    USE_KEYWORD='regexp:(use)'
    STATE_KEYWORD='regexp:(state)'
    RETURN_KEYWORD='regexp:(return)'
    IDENTIFIER='regexp:([A-Za-z_])([A-Za-z0-9_])*'
    OPEN_BRACKET='regexp:(\[)'
    CLOSE_BRACKET='regexp:(\])'
    OPEN_BRACE='regexp:(\{)'
    CLOSE_BRACE='regexp:(\})'
    OPEN_PAR='regexp:(\()'
    CLOSE_PAR='regexp:(\))'
    OPEN_TAG='regexp:(<)'
    CLOSE_TAG='regexp:(>)'
    DIGIT='regexp:[2-9]'
    RANGE_OPERATOR='regexp:(\.\.)'
    SMART_RANGE_OPERATOR='regexp:(:)'
    ASSIGN = 'regexp:[=]'
  ]
}

abra            ::= (stmt|TEST_COMMENT TEST_ASSERTION|EXPR_COMMENT EXPR_ASSERTION|COMMENT|CRLF)*
private stmt    ::= (importStmt | typeStmt | lutStmt | funcStmt | templateStmt | useStmt)

importStmt      ::= IMPORT_KEYWORD ((pathName) ( SLASH pathName)*)
                {methods=[getReferences getSourceRoot getFilePath]}

typeStmt        ::= TYPE_KEYWORD typeName (typeSize | (OPEN_BRACE fieldSpec+ CLOSE_BRACE))
                {mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                implements="org.abra.language.psi.AbraDefinition"
                methods=[getPresentation getName setName getNameIdentifier getResolvedSize ]}

fieldSpec       ::= fieldName typeSize
                    {mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                    implements="org.abra.language.psi.AbraDefinition"
                    methods=[getPresentation getResolvedSize]}

lutStmt ::= LUT_KEYWORD lutName OPEN_BRACKET lutEntry+ CLOSE_BRACKET
                    {mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                    implements="org.abra.language.psi.AbraDefinition"
                    methods=[getPresentation getName setName getNameIdentifier]}

funcStmt ::= FUNC_KEYWORD funcSignature ASSIGN funcBody
                    {mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                    implements="org.abra.language.psi.AbraDefinition"
                    methods=[getPresentation getName setName getNameIdentifier isInTemplate]}

templateStmt ::= TEMPLATE_KEYWORD templateName OPEN_TAG (placeHolderTypeName (COMMA placeHolderTypeName)*) CLOSE_TAG (funcStmt | OPEN_BRACE typeStmt* funcStmt+ CLOSE_BRACE)
                    {mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                    implements="org.abra.language.psi.AbraDefinition"
                    methods=[getPresentation getName setName getNameIdentifier]}

useStmt ::= USE_KEYWORD templateNameRef typeInstantiation (COMMA typeInstantiation)*
                    {mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                    implements="org.abra.language.psi.AbraDefinition"
                    methods=[getPresentation getName setName getNameIdentifier]}

typeInstantiation ::= OPEN_TAG (typeNameRef (COMMA typeNameRef)*) CLOSE_TAG

lutEntry ::= tritList ASSIGN tritList
                {methods = [getInputLength getOutputLength]}

funcSignature ::= typeSize funcName (OPEN_TAG constExpr CLOSE_TAG)? OPEN_PAR (funcParameter(COMMA funcParameter)*) CLOSE_PAR
funcParameter   ::= paramName typeSize

funcBody ::= mergeExpr | (OPEN_BRACE stateExpr* assignExpr* returnExpr CLOSE_BRACE)
                {methods=[getFuncSignature]}

stateExpr ::= STATE_KEYWORD varName typeSize

assignExpr ::= varName typeSize? ASSIGN mergeExpr

returnExpr ::= RETURN_KEYWORD mergeExpr
                {methods=[getResolvedSize]}

mergeExpr ::= concatExpr (MERGE_OPERATOR concatExpr)*
                {methods=[getResolvedSize ]}

concatExpr ::= postfixExpr (AMP postfixExpr)*
                {methods=[getResolvedSize ]}

postfixExpr ::= integer | funcExpr | lutExpr | lutOrSliceExpr | typeExpr | sliceExpr | (OPEN_PAR mergeExpr CLOSE_PAR)
                {methods=[getResolvedSize ]}

typeExpr ::= typeName OPEN_BRACE (fieldNameRef ASSIGN mergeExpr)+ CLOSE_BRACE
                {methods=[getResolvedSize ]}

funcExpr ::= funcNameRef (OPEN_TAG constExpr CLOSE_TAG)? OPEN_PAR (mergeExpr (COMMA mergeExpr)*) CLOSE_PAR
                {methods=[getResolvedSize isInFuncStatement isInTemplateStatement getStatment]}

lutExpr ::= lutNameRef OPEN_BRACKET (mergeExpr (COMMA mergeExpr)+) CLOSE_BRACKET
                {methods=[getResolvedSize ]}

sliceExpr ::= paramOrVarNameRef (DOT fieldNameRef)* rangeExpr?
                {methods=[getResolvedSize  hasRangeOperator hasOpenRange hasClosedRange hasSmartRange]}

lutOrSliceExpr ::= lutOrParamOrVarNameRef OPEN_BRACKET ( mergeExpr | constExpr ) CLOSE_BRACKET
                {methods=[getResolvedSize ]}

rangeExpr ::= OPEN_BRACKET constExpr ((RANGE_OPERATOR constExpr?) | (SMART_RANGE_OPERATOR constExpr))? CLOSE_BRACKET
                {methods=[getResolvedSize  hasRangeOperator hasOpenRange hasClosedRange hasSmartRange]}

constExpr ::= constTerm ((PLUS|MINUS) constTerm)*
                {methods=[getResolvedSize isTypeOrPlaceHolderNameRef getTypeOrPlaceHolderNameRef]}

constTerm ::= constFactor ((SLASH|TIMES|MODULO) constFactor)*
                {methods=[getResolvedSize ]}

constFactor ::= number | typeOrPlaceHolderNameRef | (MINUS constFactor) | (OPEN_PAR constExpr CLOSE_PAR)
                {methods = [getResolvedSize ]}


typeSize ::= OPEN_BRACKET constExpr CLOSE_BRACKET
                {methods=[getResolvedSize]}

tritList ::= trit (COMMA trit)*
                {methods = [getLength]}


private trit ::= ZERO|ONE|MINUS

varName ::= IDENTIFIER
                                {mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                                implements="org.abra.language.psi.AbraNamedElement"
                                methods=[getName setName getNameIdentifier getResolvedSize getReference]}
paramName ::= IDENTIFIER
                                {mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                                implements="org.abra.language.psi.AbraNamedElement"
                                methods=[getName setName getNameIdentifier getResolvedSize ]}
paramOrVarNameRef ::= IDENTIFIER
                                {implements="org.abra.language.psi.AbraResolvable"
                                methods = [getReference getResolvedSize ]}
lutOrParamOrVarNameRef ::= IDENTIFIER
                                {implements="org.abra.language.psi.AbraResolvable"
                                methods = [getReference ]}
fieldName ::= IDENTIFIER
                                {mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                                implements="org.abra.language.psi.AbraNamedElement"
                                methods=[getName setName getNameIdentifier]}
fieldNameRef ::= IDENTIFIER
                {implements="org.abra.language.psi.AbraResolvable"
                                                 methods=[getResolvedSize ]}
typeName ::= IDENTIFIER
                                {mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                                implements="org.abra.language.psi.AbraNamedElement"
                                methods=[getName setName getNameIdentifier]}
typeNameRef ::= IDENTIFIER
                {implements="org.abra.language.psi.AbraResolvable"
                                                 methods = [getReference ]}
funcName ::= IDENTIFIER
                {mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                                implements="org.abra.language.psi.AbraNamedElement"
                                methods=[getName setName getNameIdentifier]}
funcNameRef ::= IDENTIFIER
                {implements="org.abra.language.psi.AbraResolvable"
                                                 methods = [getReference ]}
lutName ::= IDENTIFIER
lutNameRef ::= IDENTIFIER
                {implements="org.abra.language.psi.AbraResolvable"
                                                 methods = [getReference ]}
templateName ::= IDENTIFIER
                {mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                                implements="org.abra.language.psi.AbraNamedElement"
                                methods=[getName setName getNameIdentifier]}
templateNameRef ::= IDENTIFIER
                {implements="org.abra.language.psi.AbraResolvable"
                                                 methods = [getReference ]}
placeHolderTypeName ::= IDENTIFIER
                        {mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                                implements="org.abra.language.psi.AbraNamedElement"
                                methods=[getName setName getNameIdentifier]}
typeOrPlaceHolderNameRef ::= IDENTIFIER
                {implements="org.abra.language.psi.AbraResolvable"
                                                 methods = [getReference ]}
pathName ::= IDENTIFIER

number ::= (ZERO|ONE|DIGIT)+
                {methods = [getResolvedSize ]}

integer ::= MINUS | ZERO | ONE | number | (MINUS number)
                {methods = [getResolvedSize ]}
