{
  parserClass="org.abra.language.parser.AbraParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Abra"
  psiImplClassSuffix="Impl"
  psiPackage="org.abra.language.psi"
  psiImplPackage="org.abra.language.psi.impl"

  elementTypeHolderClass="org.abra.language.psi.AbraTypes"
  elementTypeClass="org.abra.language.psi.AbraElementType"
  tokenTypeClass="org.abra.language.psi.AbraTokenType"
  psiImplUtilClass="org.abra.language.psi.AbraPsiImplUtil"

}

abra            ::= (stmt|TEST_COMMENT TEST_ASSERTION|EXPR_COMMENT EXPR_ASSERTION|COMMENT|CRLF)*
private stmt    ::= (importStmt | typeStmt | lutStmt | funcStmt | templateStmt | useStmt) SEMICOLON
                    {pin=1 recoverWhile=stmt_rule}
private stmt_rule ::= !(stmt | TEST_COMMENT | EXPR_COMMENT)

importStmt      ::= IMPORT_KEYWORD file_path
                    {methods=[getReferences getSourceRoot]}

typeStmt        ::= (TYPE_KEYWORD)? typeName (staticTypeSize | (OPEN_BRACE (fieldSpec SEMICOLON)+ CLOSE_BRACE))
                    {mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                    implements="org.abra.language.psi.AbraDefinition"
                    methods=[getPresentation getName setName getNameIdentifier getResolvedSize ]}

lutStmt         ::= (LUT_KEYWORD)? lutName OPEN_BRACKET lutEntry+ CLOSE_BRACKET
                    {mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                    implements="org.abra.language.psi.AbraDefinition"
                    methods=[getPresentation getName setName getNameIdentifier]}

funcStmt        ::= (FUNC_KEYWORD)? funcDefinition
                    {mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                    implements="org.abra.language.psi.AbraDefinition"
                    methods=[getPresentation getName setName getNameIdentifier]}


templateStmt    ::= TEMPLATE_KEYWORD templateName OPEN_TAG (placeHolderName (COMMA placeHolderName)*) CLOSE_TAG FUNC_KEYWORD? funcDefinition
                    {mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                    implements="org.abra.language.psi.AbraDefinition"
                    methods=[getPresentation getName setName getNameIdentifier]}


useStmt         ::= (USE_KEYWORD)? templateNameRef OPEN_TAG (typeNameRef (',' typeNameRef)*) CLOSE_TAG
                    {mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                    implements="org.abra.language.psi.AbraDefinition"
                    methods=[getPresentation getName setName getNameIdentifier]}

fieldSpec       ::= fieldName staticTypeSize
                    {mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                     implements="org.abra.language.psi.AbraDefinition"
                     methods=[getPresentation]}

funcDefinition  ::= typeSize? funcName (OPEN_TAG typeOrPlaceHolderNameRef CLOSE_TAG)? OPEN_PAR (funcParameter (COMMA funcParameter)*) CLOSE_PAR ASSIGN funcBody
funcParameter   ::= paramName typeSize
funcBody        ::= returnExpr | (OPEN_BRACE (assignExpr SEMICOLON)* (RETURN_KEYWORD)? (returnExpr | OPEN_PAR returnExpr CLOSE_PAR) SEMICOLON CLOSE_BRACE)
returnExpr      ::=  concatExpr | mergeExpr | funcExpr | typeExpr | lutExpr | sliceExpr | integer
                {methods=[getResolvedSize]}

assignExpr      ::= (STATE_KEYWORD)? varName typeSize? ASSIGN returnExpr

mergeExpr       ::= (postfixExpr) (MERGE_OPERATOR (postfixExpr))+
                {methods=[getResolvedSize ]}

concatExpr      ::= postfixExpr (AMP postfixExpr)+
                {methods=[getResolvedSize ]}

postfixExpr     ::=  typeExpr | funcExpr | lutExpr | sliceExpr | integer | (OPEN_PAR mergeExpr CLOSE_PAR) | (OPEN_PAR concatExpr CLOSE_PAR)
                {methods=[getResolvedSize ]}

typeExpr        ::= typeNameRef OPEN_BRACE (fieldNameRef ASSIGN returnExpr SEMICOLON)+ CLOSE_BRACE
                {methods=[getResolvedSize ]}

funcExpr        ::= funcNameRef (OPEN_TAG constExpr CLOSE_TAG)? OPEN_PAR (concatExpr | (postfixExpr (COMMA postfixExpr)*)) CLOSE_PAR (OPEN_BRACKET rangeExpr CLOSE_BRACKET)?
                {methods=[getResolvedSize  hasRangeOperator hasOpenRange hasClosedRange hasPostSlice isInFuncStatement isInTemplateStatement getStatment]}

lutExpr         ::= lutOrParamOrVarNameRef OPEN_BRACKET (postfixExpr (COMMA postfixExpr)*) CLOSE_BRACKET
                {methods=[getResolvedSize ]}

sliceExpr       ::= paramOrVarNameRef (DOT fieldNameRef)* (OPEN_BRACKET rangeExpr CLOSE_BRACKET)?
                {methods=[getResolvedSize  hasRangeOperator hasOpenRange hasClosedRange]}

rangeExpr       ::= constExpr ((RANGE_OPERATOR constExpr?)|smartRange constExpr)?
                {methods=[hasRangeOperator hasOpenRange hasClosedRange]
                 pin=2 recoverWhile=close_bracket_rule}

smartRange      ::= SMART_RANGE_OPERATOR
constExpr       ::= constTerm (constOperator constExpr)?
                {methods=[getResolvedSize ]}

staticConstExpr ::= staticConstTerm (constOperator staticConstExpr)?
                {methods=[getResolvedSize]}

constOperator   ::= PLUS_OR_MINUS

staticConstTerm ::= staticConstPrimary (termOperator staticConstTerm )?
                {methods=[getResolvedSize]}

constTerm       ::= constPrimary (termOperator constTerm )?
                {methods=[getResolvedSize ]}

termOperator    ::= DIV_TIMES_MODULO

staticConstPrimary    ::= integer | typeNameRef
                      {methods=[getResolvedSize]}

constPrimary    ::= trit | integer | typeOrPlaceHolderNameRef | (OPEN_PAR mergeExpr CLOSE_PAR)
                {methods=[getResolvedSize ]}

staticTypeSize  ::= OPEN_BRACKET staticConstExpr CLOSE_BRACKET
                {methods=[getResolvedSize]}

typeSize        ::= OPEN_BRACKET constExpr CLOSE_BRACKET
                {methods=[getResolvedSize ]}

lutEntry        ::= tritList ASSIGN tritList SEMICOLON
                {methods = [getInputLength getOutputLength]}

tritList        ::= trit (COMMA trit)*
                {methods = [getLength]
                 pin=2 recoverWhile="tritList_rule"}


trit            ::= TRIT_CHAR

number          ::= DIGIT+

integer         ::= ('-') number | trit | number
                {methods = [getResolvedSize ]}


file_path                   ::= FILENAME (SLASH FILENAME)*  {pin=1 recoverWhile="semicolon_rule"}
private semicolon_rule      ::= !(';'|SEMICOLON)
private open_bracket_rule   ::= !('['|OPEN_BRACKET)
private close_bracket_rule  ::= !(']'|CLOSE_BRACKET)
private tritList_rule       ::= !(';'|'=')


typeName                    ::= IDENTIFIER
                                {mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                                implements="org.abra.language.psi.AbraNamedElement"
                                methods=[getName setName getNameIdentifier]}
fieldName                   ::= IDENTIFIER
lutName                     ::= IDENTIFIER
                                {mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                                implements="org.abra.language.psi.AbraNamedElement"
                                methods=[getName setName getNameIdentifier getResolvedSize ]
                                pin=1 recoverWhile="open_bracket_rule"}
templateName                ::= IDENTIFIER
                                {mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                                implements="org.abra.language.psi.AbraNamedElement"
                                methods=[getName setName getNameIdentifier]}
placeHolderName             ::= IDENTIFIER
                                {mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                                implements="org.abra.language.psi.AbraNamedElement"
                                methods=[getName setName getNameIdentifier]}
funcName                    ::= IDENTIFIER
                                {mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                                implements="org.abra.language.psi.AbraNamedElement"
                                methods=[getName setName getNameIdentifier]}
paramName                   ::= IDENTIFIER
                                {mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                                implements="org.abra.language.psi.AbraNamedElement"
                                methods=[getName setName getNameIdentifier getResolvedSize ]}
varName                     ::= IDENTIFIER
                                {mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                                implements="org.abra.language.psi.AbraNamedElement"
                                methods=[getName setName getNameIdentifier getResolvedSize ]}

typeNameRef                 ::= IDENTIFIER      {implements="org.abra.language.psi.AbraResolvable" methods = [getReference]}
fieldNameRef                ::= IDENTIFIER      {implements="org.abra.language.psi.AbraResolvable" methods = [getReference getResolvedSize]}
lutOrParamOrVarNameRef      ::= IDENTIFIER      {implements="org.abra.language.psi.AbraResolvable" methods = [getReference]}
templateNameRef             ::= IDENTIFIER      {implements="org.abra.language.psi.AbraResolvable" methods = [getReference]}
funcNameRef                 ::= IDENTIFIER      {implements="org.abra.language.psi.AbraResolvable" methods = [getReference getFuncExpr getStatement]}
paramOrVarNameRef           ::= IDENTIFIER      {implements="org.abra.language.psi.AbraResolvable" methods = [getReference getResolvedSize ]}
typeOrPlaceHolderNameRef    ::= IDENTIFIER      {implements="org.abra.language.psi.AbraResolvable" methods = [getReference getTemplateStatement getPlaceHolderIndex]}