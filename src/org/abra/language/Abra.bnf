{

 parserClass="org.abra.language.parser.AbraParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Abra"
  psiImplClassSuffix="Impl"
  psiPackage="org.abra.language.psi"
  psiImplPackage="org.abra.language.psi.impl"

  elementTypeHolderClass="org.abra.language.psi.AbraTypes"
  elementTypeClass="org.abra.language.psi.AbraElementType"
  tokenTypeClass="org.abra.language.psi.AbraTokenType"
  psiImplUtilClass="org.abra.language.psi.AbraPsiImplUtil"

  tokens=[
    ZERO='regexp:(0)'
    ONE='regexp:(1)'
    MINUS='regexp:(-)'
    PLUS='regexp:(\+)'
    SLASH='regexp:(/)'
    TIMES='regexp:(\*)'
    MODULO='regexp:(%)'
    AMP='regexp:(&)'
    DOT='regexp:(\.)'
    COMMENT='regexp://.*'
    WHITE_SPACE='regexp:\s+'

   CRLF='regexp:[\r\n]+'
   MERGE_OPERATOR='regexp:(\\)'
     SLASH='regexp:(/)'
     COMMA='regexp:(,)'
    IMPORT_KEYWORD='import'
    TYPE_KEYWORD='type'
    LUT_KEYWORD='lut'
    FUNC_KEYWORD='func'
    TEMPLATE_KEYWORD='template'
    USE_KEYWORD='use'
    STATE_KEYWORD='state'
    RETURN_KEYWORD='return'
    IDENTIFIER='regexp:([A-Za-z_])([A-Za-z0-9_])*'
    OPEN_BRACKET='regexp:(\[)'
    CLOSE_BRACKET='regexp:(\])'
    OPEN_BRACE='regexp:(\{)'
    CLOSE_BRACE='regexp:(\})'
    OPEN_PAR='regexp:(\()'
    CLOSE_PAR='regexp:(\))'
    OPEN_TAG='regexp:(<)'
    CLOSE_TAG='regexp:(>)'
    DIGIT='regexp:[2-9]'
    RANGE_OPERATOR='regexp:(\.\.)'
    SMART_RANGE_OPERATOR='regexp:(:)'
    ASSIGN = 'regexp:[=]'
  ]
}

abra                ::= (stmt|TEST_COMMENT TEST_ASSERTION|EXPR_COMMENT EXPR_ASSERTION|COMMENT|CRLF)*
private stmt        ::= (importStmt | typeStmt | lutStmt | funcStmt | templateStmt | useStmt)

importStmt          ::= IMPORT_KEYWORD ((pathName) ( SLASH pathName)*)
                    {
                        mixin="org.abra.language.psi.impl.ReferencesCache"
                        methods=[getSourceRoot getFilePath]
                        pin=1
                    }

typeStmt            ::= TYPE_KEYWORD typeName (typeSize | ('{' fieldSpec+ '}'))
                    {
                        mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                        implements="org.abra.language.psi.AbraDefinition"
                        methods=[getPresentation getName setName getNameIdentifier getResolvedSize ]
                        pin=1
                    }

fieldSpec           ::= fieldName typeSize
                    {
                        mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                        implements="org.abra.language.psi.AbraDefinition"
                        methods=[getPresentation getResolvedSize]
                    }

lutStmt             ::= LUT_KEYWORD lutName '[' lutEntry+ ']'
                    {
                        mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                        implements="org.abra.language.psi.AbraDefinition"
                        methods=[getPresentation getName setName getNameIdentifier]
                        pin=1
                    }

funcStmt            ::= FUNC_KEYWORD funcSignature ASSIGN funcBody
                    {
                        mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                        implements="org.abra.language.psi.AbraDefinition"
                        methods=[getPresentation getName setName getNameIdentifier isInTemplate getAllTypeInstantiation]
                        pin=1
                    }

templateStmt        ::= TEMPLATE_KEYWORD templateName '<' (placeHolderTypeName (COMMA placeHolderTypeName)*) '>' (funcStmt | '{' typeStmt* funcStmt+ '}')
                    {
                        mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                        implements="org.abra.language.psi.AbraDefinition"
                        methods=[getPresentation getName setName getNameIdentifier getAllTypeInstantiation]
                        pin=1
                    }

useStmt             ::= USE_KEYWORD templateNameRef typeInstantiation (COMMA typeInstantiation)*
                    {
                        mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                        implements="org.abra.language.psi.AbraDefinition"
                        methods=[getPresentation getName setName getNameIdentifier]
                        pin=1
                    }

typeInstantiation   ::= '<' (typeNameRef (COMMA typeNameRef)*) '>'
                    {
                        mixin="org.abra.language.psi.impl.AbraDefinitionImpl"
                        implements="org.abra.language.psi.AbraDefinition"
                        methods=[getPresentation]
                    }

lutEntry            ::= tritList ASSIGN tritList
                    {
                        methods = [getInputLength getOutputLength]
                        pin=2 recoverWhile=lutEntryRecover
                    }
private lutEntryRecover ::= !(lutEntry | ']')

funcSignature       ::= typeSize funcName ('<' constExpr (COMMA constExpr)* '>')? '(' (funcParameter(COMMA funcParameter)*) ')'
                    {
                        methods = [getTypeLabelWithBrackets]
                    }
funcParameter       ::= paramName typeSize

funcBody            ::= mergeExpr | ('{' joinExpr* affectExpr * stateExpr* assignExpr* returnExpr '}')
                    {
                        methods=[getFuncSignature]
                    }

joinExpr            ::= JOIN_KEYWORD environmentName (LIMIT_KEYWORD envValue)?
                    {
                        pin=1 recoverWhile=joinExprRecover
                    }
private joinExprRecover ::= !(joinExpr | affectExpr  | stateExpr | assignExpr | returnExpr)

affectExpr          ::= AFFECT_KEYWORD environmentName (DELAY_KEYWORD envValue)?
                    {
                        pin=1 recoverWhile=environmentRecover
                    }
private environmentRecover ::= !(affectExpr  | stateExpr | assignExpr | returnExpr)

envValue            ::= number

stateExpr           ::= STATE_KEYWORD varName typeSize
                    {
                        pin=1 recoverWhile=stateExprRecover
                    }
private stateExprRecover ::= !(stateExpr | assignExpr | returnExpr)

assignExpr          ::= varName ASSIGN mergeExpr
                    {
                        pin=2 recoverWhile=assignExprRecover
                    }
private assignExprRecover ::= !(assignExpr | returnExpr)

returnExpr          ::= RETURN_KEYWORD mergeExpr
                    {
                        pin=1 recoverWhile=returnExprRecover
                    }
private returnExprRecover ::= (typeExpr | !('}'))

mergeExpr           ::= concatExpr (MERGE_OPERATOR concatExpr)*

concatExpr          ::= postfixExpr (AMP postfixExpr)*

postfixExpr         ::= integer | funcExpr | lutExpr | lutOrSliceExpr | typeExpr | sliceExpr | ('(' mergeExpr ')')

typeExpr            ::= typeNameRef '{' fieldAssignExpr+ '}'
                    {
                        methods=[getResolvedSize ]
                    }

private fieldAssignExpr ::= fieldNameRef ASSIGN mergeExpr
                   {
                        pin=2 recoverWhile=returnFieldAssignExpr
                   }
private returnFieldAssignExpr ::= !(fieldAssignExpr | '}')

funcExpr            ::= funcNameRef ('<' constExpr (COMMA constExpr)* '>')? '(' (mergeExpr (COMMA mergeExpr)*) ')'
                    {
                        methods=[isInFuncStatement isInTemplateStatement getStatment getFuncStmt]
                    }

lutExpr             ::= lutNameRef '[' (mergeExpr (COMMA mergeExpr)+) ']'
                    {
                        methods=[getResolvedSize ]
                    }

sliceExpr           ::= paramOrVarNameRef (DOT fieldNameRef)* rangeExpr?
                    {
                        methods=[ hasRangeOperator hasOpenRange hasClosedRange hasSmartRange]
                    }

lutOrSliceExpr      ::= lutOrParamOrVarNameRef '[' ( mergeExpr | constExpr ) ']'
                    {
                        methods=[getResolvedSize ]
                    }

rangeExpr           ::= '[' constExpr ((RANGE_OPERATOR constExpr?) | (SMART_RANGE_OPERATOR constExpr))? ']'
                    {
                        methods=[ hasRangeOperator hasOpenRange hasClosedRange hasSmartRange]
                    }

constExpr           ::= constTerm ((PLUS|MINUS) constTerm)*
                    {
                        methods=[getResolvedSize isTypeOrPlaceHolderNameRef getTypeOrPlaceHolderNameRef]
                    }

constTerm           ::= constFactor ((SLASH|TIMES|MODULO) constFactor)*
                    {
                        methods=[getResolvedSize ]
                    }

constFactor         ::= number | typeOrPlaceHolderNameRef | (MINUS constFactor) | ('(' constExpr ')')
                    {
                        methods = [getResolvedSize ]
                    }

typeSize            ::= '[' constExpr ']'
                    {
                        methods=[getResolvedSize]
                    }

tritList            ::= trit (COMMA trit)*
                    {
                        methods = [getLength]
                    }


private trit        ::= ZERO|ONE|MINUS

varName             ::= IDENTIFIER
                    {
                        mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                        implements="org.abra.language.psi.AbraNamedElement"
                        methods=[getName setName getNameIdentifier getReference]
                    }

paramName           ::= IDENTIFIER
                    {
                        mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                        implements="org.abra.language.psi.AbraNamedElement"
                        methods=[getName setName getNameIdentifier getResolvedSize ]
                    }

paramOrVarNameRef   ::= IDENTIFIER
                    {
                        implements="org.abra.language.psi.AbraResolvable"
                        methods = [getReference]
                    }

lutOrParamOrVarNameRef ::= IDENTIFIER
                    {
                        implements="org.abra.language.psi.AbraResolvable"
                        methods = [getReference ]
                    }

fieldName           ::= IDENTIFIER
                    {
                        mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                        implements="org.abra.language.psi.AbraNamedElement"
                        methods=[getName setName getNameIdentifier]
                    }

fieldNameRef        ::= IDENTIFIER
                    {
                        implements="org.abra.language.psi.AbraResolvable"
                        methods=[getResolvedSize getReference]
                    }

typeName            ::= IDENTIFIER
                    {
                        mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                        implements="org.abra.language.psi.AbraNamedElement"
                        methods=[getName setName getNameIdentifier getResolvedSize]
                        pin=1 recoverWhile=typeNameRecover
                    }
private typeNameRecover ::= !('['|'{')

typeNameRef         ::= IDENTIFIER
                    {
                        implements="org.abra.language.psi.AbraResolvable"
                        methods = [getReference ]
                    }

funcName            ::= IDENTIFIER
                    {
                        mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                        implements="org.abra.language.psi.AbraNamedElement"
                        methods=[getName setName getNameIdentifier]
                    }

funcNameRef         ::= IDENTIFIER
                    {
                        implements="org.abra.language.psi.AbraResolvable"
                        methods = [getReference ]
                    }

lutName             ::= IDENTIFIER
                    {
                        mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                        implements="org.abra.language.psi.AbraNamedElement"
                        methods = [getName setName getNameIdentifier]
                        pin=1 recoverWhile=lutNameRecover
                    }
private lutNameRecover ::= !'['

lutNameRef          ::= IDENTIFIER
                    {
                        implements="org.abra.language.psi.AbraResolvable"
                        methods = [getReference ]
                    }

templateName        ::= IDENTIFIER
                    {
                        mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                        implements="org.abra.language.psi.AbraNamedElement"
                        methods=[getName setName getNameIdentifier]
                    }

templateNameRef     ::= IDENTIFIER
                    {
                        implements="org.abra.language.psi.AbraResolvable"
                        methods = [getReference ]
                    }

placeHolderTypeName ::= IDENTIFIER
                    {
                        mixin="org.abra.language.psi.impl.AbraNamedElementImpl"
                        implements="org.abra.language.psi.AbraNamedElement"
                        methods=[getName setName getNameIdentifier]
                    }

typeOrPlaceHolderNameRef ::= IDENTIFIER
                    {
                        implements="org.abra.language.psi.AbraResolvable"
                        methods = [getReference ]
                    }

pathName            ::= IDENTIFIER

environmentName     ::= IDENTIFIER

number              ::= (ZERO|ONE|DIGIT)+
                    {
                        methods = [getResolvedSize ]
                    }

integer             ::= MINUS | ZERO | ONE | number | (MINUS number)
                    {
                        methods = [getResolvedSize ]
                    }
